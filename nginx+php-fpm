1、《HTTP权威指南》基本概念

	* CGI：是个协议，规范web服务器的
	* php-cgi： PHP的解释器。 php-cgi只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理
	* fastcgi： 用来提高CGI程序性能的。 Fastcgi会先启一个master，解析配置文件php.ini，初始化执行环境，然后再启动多个worker。当请求过来时，
    master会传递给一个worker，然后立即可以接受下一个请求。会进程管理
	* PHP-FPM： 是一个实现了Fastcgi的程序，被PHP官方收了。用来管理 php-cgi进程的程序。 FastCGI 进程管理器

CGI是干嘛的？
CGI是为了保证web server传递过来的数据是标准格式的，方便CGI程序的编写者。
 web server（比如说nginx）只是内容的分发者。比如，如果请求/index.html，那么web server会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。
 如果现在请求的是/index.php，根据配置文件，nginx知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。
 Nginx会传哪些数据给PHP解析器呢？url要有吧，查询字符串也得有吧，POST数据也要有，HTTP header不能少吧，好的，CGI就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。
 仔细想想，你在PHP代码中使用的用户从哪里来的。
  当web server收到/index.php这个请求后，会启动对应的CGI程序，这里就是PHP的解析器。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，
 再以规定CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器。

Fastcgi是干嘛的？
提高性能，那么CGI程序的性能问题在哪呢？"PHP解析器会解析php.ini文件，初始化执行环境"，就是这里了。标准的CGI对每个请求都会执行这些步骤（不闲累啊！启动进程
很累的说！），所以处理每个时间的时间会比较长。这明显不合理嘛！那么Fastcgi是怎么做的呢？首先，Fastcgi会先启一个master，解析配置文件，初始化执行环境，
然后再启动多个worker。当请求过来时，master会传递给一个worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当worker不够用时，
master可以根据配置预先启动几个worker等着；当然空闲worker太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是fastcgi的对进程的管理。

PHP-FPM是干嘛的？
PHP的解释器是php-cgi。php-cgi只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理（皇上，臣妾真的做不到啊！）所以就出现了一些能够调度php-cgi
进程的程序，比如说由lighthttpd分离出来的spawn-fcgi。好了PHP-FPM也是这么个东东，在长时间的发展后，逐渐得到了大家的认可（要知道，前几年大家可是抱怨
PHP-FPM稳定性太差的），也越来越流行。php-fpm就成了粘合nginx和php之间最好的工具。

nginx--（CGI）--php解析器---解析php.ini，初始化环境。
nginx+php-fpm 的实现原理
Nginx 处理不了动态文件。需要交给php解释器处理。怎么通信呢？通过cgi协议。使得nginx能处理动态文件。php-fpm是fastcgi的实现。有一个master进程，负责监听端口，接收Nginx发过来的请求，多个worker进程，每个里面嵌入了一个php解释器

nginx配置文件，要include加载fastcgi模块，fastcgi_pass来指定fastcgi进程监听的IP地址和端口

nginx+ php-fpm流程：
请求www.baidu.com---nginx---路由到index.php---加载nginx的fast-cgi模块----fast-cgi监听127.0.0.1:9000地址---index.php请求到达127.0.0.1:9000--
php-fpm 监听127.0.0.1:9000---php-fpm 接收到请求，启用worker进程处理请求---php-fpm 处理完请求，返回给nginx---nginx将结果通过http返回给浏览器



